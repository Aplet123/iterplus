/**
 * A value that an iterator yields. Intentionally ignores the return value.
 */
export type /* o:Async- */ IterYield<T> =
    | /* o:Promise<- */ {done: false; value: T}
    | {done: true; value: unknown} /* o:-> */;

/**
 * A Javascript iterator. Intentionally ignores the return value.
 *
 * @typeParam T The type of item yielded by the iterator.
 */
export interface /* o:Async- */ Iter<T> {
    /**
     * A function that yields the next item of the iterator.
     */
    next(): /* o:Async- */ IterYield<T>;
}

/**
 * An iterable object.
 *
 * @typeParam T The type of item yielded by the iterator generated by the iterable.
 */
export interface /* r:CanAsyncIter */ CanIter<T> {
    /**
     * A function that generates an iterator.
     */
    [Symbol./* r:asyncIterator */ iterator](): /* o:Async- */ Iter<T>;
}

/**
 * Tests if an object is an iterator.
 * @param obj The object to test for.
 * @returns If `obj` is an iterator.
 */
export function /* r:isAsyncIter */ isIter(
    obj: any
): obj is /* o:Async- */ Iter<unknown> {
    return (
        typeof obj === "object" &&
        obj !== null &&
        typeof obj.next === "function"
    );
}

/**
 * Tests if an object is iterable.
 * @param obj The object to test for.
 * @returns If `obj` is an iterable.
 */
export function /* r:canAsyncIter */ canIter(
    obj: any
): obj is /* r:CanAsyncIter */ CanIter<unknown> {
    return (
        typeof obj === "object" &&
        obj !== null &&
        Symbol./* r:asyncIterator */ iterator in obj
    );
}

/**
 * A wrapper around an iterator to add additional functionality.
 */
export class /* o:Async- */ IterPlus<T>
    implements
        /* o:Async- */ Iter<T>,
        /* r:CanAsyncIter */ CanIter<T>,
        /* o:Async- */ Iterator<T>,
        /* o:Async- */ Iterable<T> {
    /**
     * The internal iterator that this wraps around.
     */
    private internal: /* o:Async- */ Iter<T>;
    constructor(iter: /* o:Async- */ Iter<T>) {
        this.internal = iter;
    }

    /* o:async */ next(): /* o:Async- */ IterYield<T> {
        return /* o:await */ this.internal.next();
    }

    [Symbol./* r: asyncIterator */ iterator](): /* o:Async- */ Iter<T> {
        return this;
    }

    // ==== STATIC METHODS ====
    /**
     * Generates an empty iterator.
     *
     * @typeParam T The item yielded by the iterator.
     * @returns The generated iterator.
     */
    static empty<T>(): /* o:Async- */ IterPlus<T> {
        return new /* o:Async- */ IterPlus({
            /* o:async */ next() {
                return {
                    done: true,
                    value: null,
                };
            },
        });
    }

    /**
     * Generates an iterator that yields values from a function and ends once the function returns null.
     *
     * @param func The function to yield values, or null to end the iterator.
     * @returns The generated iterator.
     */
    static fromFunction<T>(
        func: () => /* o:Promise<- */ T | null /* o:-> */
    ): /* o:Async- */ IterPlus<T> {
        return new /* o:Async- */ IterPlus({
            /* o:async */ next() {
                const val = /* o:await */ func();
                if (val === null) {
                    return {
                        done: true,
                        value: null,
                    };
                }
                return {
                    done: false,
                    value: val,
                };
            },
        });
    }
}
